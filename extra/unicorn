#!/bin/sh

# File: /etc/init.d/unicorn

### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the unicorn web server
# Description:       starts unicorn
### END INIT INFO

set -e
# Example init script, this can be used with nginx, too,
# since nginx and unicorn accept the same signals

# Feel free to change any of the following variables for your app:
TIMEOUT=${TIMEOUT-60}
APP_ROOT=/home/padmin/uw-astro
PID=$APP_ROOT/tmp/pids/unicorn.pid
CMD="cd $APP_ROOT; LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 TZ=America/Los_Angeles RACK_ENV=production RAILS_ENV=production RAILS_SERVE_STATIC_FILES=enabled bundle exec unicorn -c $APP_ROOT/config/unicorn.rb -D"
AS_USER=padmin
action="$1"
set -u

old_pid="$PID.oldbin"

cd $APP_ROOT || exit 1

sig () {
        test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
        test -s $old_pid && kill -$1 `cat $old_pid`
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su -c "$1" - $AS_USER
  fi
}

case $action in
start)
        sig 0 && echo >&2 "Already running" && exit 0
        echo "Starting APP Unicorns..."
        run "$CMD"
        ;;
stop)
        if sig QUIT
        then
          while sig 0
          do
            echo "Stopping APP Unicorns..."
            sleep 2
          done
          exit 0
        fi
        echo >&2 "Not running"
        ;;
force-stop)
        sig TERM && exit 0
        echo >&2 "Not running"
        ;;

restart)
        sig QUIT && echo restarting && sleep 2 \
        && su - $USER -c "$CMD" && exit 0
        echo >&2 "Couldn't restart."
        ;;

reload)
        sig HUP && echo reloaded OK && exit 0
        echo >&2 "Couldn't reload, starting instead"
        run "$CMD"
        ;;
upgrade)
        if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
        then
                n=$TIMEOUT
                while test -s $old_pid && test $n -ge 0
                do
                        printf '.' && sleep 1 && n=$(( $n - 1 ))
                done
                echo

                if test $n -lt 0 && test -s $old_pid
                then
                        echo >&2 "$old_pid still exists after $TIMEOUT seconds"
                        exit 1
                fi
                exit 0
        fi
        echo >&2 "Couldn't upgrade, starting '$CMD' instead"
        run "$CMD"
        ;;

status)
        sig 0 && echo >&2 "Running." && exit 0
        echo >&2 "$Not running."
        ;;

reopen-logs)
        sig USR1
        ;;
*)
        echo >&2 "Usage: $0 <start|stop|force-stop|restart|reload|upgrade|status|reopen-logs>"
        exit 1
        ;;
esac
